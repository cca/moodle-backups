#!/usr/bin/env fish

set -g TESTS 0
set -g PASSED 0
set -g FAILED 0
function fail
    set -g TESTS (math 1 + $TESTS)
    set -g FAILED (math 1 + $FAILED)
    set_color red
    echo -e "❌ test failed\n"
    set_color normal
end
function pass
    set -g TESTS (math 1 + $TESTS)
    set -g PASSED (math 1 + $PASSED)
    set_color green
    echo -e "✓ test passed\n"
    set_color normal
end
function check_result
    if test $status -eq 0
        pass
    else
        fail
    end
end
function heading
    set_color --bold
    echo -e "\t$argv...\n"
    set_color normal
end
source ./lib/k8s.fish
# run tests against the staging cluster
set -gx NS moo-stg1
set ctx gke_cca-web-staging_us-west1-b_ccaedu-stg
if test (kubectl config current-context) != $ctx
    kubectl config set-context $ctx
end
set -gx POD (get_pod)
set BACKUPS_PATH /bitnami/moodledata/backups
set MOODLE_PATH /bitnami/moodle

# create backup
function create
    heading 'Create a backup file on the Moodle pod'

    # requires a test course in staging, use TEST_COURSE env var
    # or Eric's hard-coded one here https://moodle-stg-1.cca.edu/course/view.php?id=3606
    set -q TEST_COURSE || set TEST_COURSE 3606

    ./backup.fish mk $TEST_COURSE
    kubectl exec -n$NS $POD -- ls $BACKUPS_PATH | grep backup_$TEST_COURSE 2&>/dev/null
    check_result

    kubectl exec -n$NS $POD -- sh -c 'rm /bitnami/moodledata/backups/backup_3606*'
end

# download backup
function download
    heading 'Download one file at a time from Moodle'

    # create fake backup files
    set file1 backup_2666_ANIMA-1001-01-2666TE_2666.06.03.mbz
    set file2 backup_2667_WRLIT-4444-04-2666TE_2666.06.03.mbz
    for file in $file1 $file2
        kubectl exec -n$NS $POD -- touch $BACKUPS_PATH/$file
    end

    ./backup.fish dl $file1
    ls data | grep $file1 >/dev/null
    check_result
    rm data/$file1

    heading 'Download the entire backups folder from Moodle'

    ./backup.fish dl --all
    ls data | grep $file1 >/dev/null; and ls data | grep $file2 >/dev/null
    check_result

    for file in $file1 $file2
        kubectl exec -n$NS $POD -- rm $BACKUPS_PATH/$file
        rm data/$file
    end
end

# copy backup to GSB
function copy
    heading 'Copy a backup file to GSB'

    set FILE backup_2666_TESTS-101-01-2666TE_2022.06.21.mbz
    touch test/$FILE
    set SEMESTER 2666TE

    ./backup.fish cp $SEMESTER ./test/$FILE
    gsutil ls gs://moodle-course-archive/$SEMESTER/$FILE >/dev/null
    check_result

    gsutil rm gs://moodle-course-archive/$SEMESTER/$FILE 2&>/dev/null
end

# delete backup & course from pod
function delete
    heading 'Delete the local course & its backup'

    # create a test course
    set course (kubectl exec -n$NS $POD -- moosh --no-user-check --moodle-path $MOODLE_PATH course-create TESTS-1001-01) >/dev/null
    # need to get the course ID from output of above cmd
    # create a backup of the test course
    kubectl exec -n$NS $POD -- moosh --no-user-check --moodle-path $MOODLE_PATH course-backup --path $BACKUPS_PATH $course 2&>/dev/null
    # delete them both
    ./backup.fish rm $course
    check_result
end

# retrieve an existing course backup
function retrieve
    # setup: create two fake backup files in our GSB test area
    set file1 backup_2666_TESTS-101-01-2666TE_2022.07.21.mbz
    set file2 backup_2666_TESTS-102-02-2666TE_2022.07.21.mbz
    touch test/$file1 test/$file2
    set SEMESTER 2666TE
    gsutil -m cp test/$file1 test/$file2 gs://moodle-course-archive/$SEMESTER/ 2&>/dev/null

    heading 'Retrieve a backup file from GSB without using a semester'
    ./backup.fish ret $file1 2>/dev/null
    ls data/$file1 2&>/dev/null
    check_result

    heading 'Retrieve a backup file from GSB using a semester'
    ./backup.fish ret -s $SEMESTER TESTS-102 2>/dev/null
    ls data/$file2 2&>/dev/null
    check_result

    heading 'Fail to find a non-existent backup file in GSB'
    set output (./backup.fish ret -s $SEMESTER THISBACKUPDOESNOTEXIST 2>| cat -)
    string match -e -q "Unable to find any courses matching the query" $output
    check_result

    heading 'Fail to download when there are two matching backups in GSB'
    set output (./backup.fish ret -s $SEMESTER TESTS-10 2>| cat -)
    string match -e -q "Multiple backups matched the query" $output
    check_result

    # teardown
    for file in $file1 $file2
        gsutil rm gs://moodle-course-archive/$SEMESTER/$file 2&>/dev/null
        rm test/$file
    end
end

echo "It should..."
# make individual tests runnable
switch $argv[1]
    case ''
        create
        download
        copy
        delete
        retrieve
    case create
        create
    case download
        download
    case copy
        copy
    case delete
        delete
    case retrieve
        retrieve
end

# summarize results
set_color --bold
echo -n "$PASSED/$TESTS tests passed."
if test $FAILED -gt 0
    set_color red
    echo " $FAILED failure(s) - see results above."
else
    # trailing newline
    echo
end
set_color normal
